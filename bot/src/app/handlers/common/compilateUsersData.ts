import { getUser } from "../controllers/userController";

export const compilateSendMessageFromUsersData = async(userList:any[])=>{
    const aggregatedData: { [key: number]: any } = {};

    for (const user of userList) {
        try {
            const chatId = isNaN(Number(user.clientName.split("-")[0]))
            ? 0
            : Number(user.clientName.split("-")[0]);
            const vpnId = user.clientName.split("-")[1] || user.clientName;
            const clientInfo = await getUser(chatId);
        
            if (!aggregatedData[chatId]) {
            // –ï—Å–ª–∏ chatId –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
                aggregatedData[chatId] = {
                    name: clientInfo?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    telegramlink: clientInfo?.telegramlink || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    telegramid: clientInfo?.telegramid || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    vpnIds: [], // –°–ø–∏—Å–æ–∫ VPN IDs
                };
            }
        
            // –î–æ–±–∞–≤–ª—è–µ–º VPN ID –∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            aggregatedData[chatId].vpnIds.push({
                id: vpnId,
                status: user.valid ? "–î–µ–π—Å—Ç–≤—É—é—â–∏–π" : "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π",
            });
        } catch (e) {
            console.log(user.clientName);
        }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let sendMessage = "";
    
    sendMessage += "üìú <b>–û—Ç—á—ë—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>\n\n";

    for (const [chatId, data] of Object.entries(aggregatedData)) {
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      sendMessage += `üîπ <b>–ß–∞—Ç ID:</b> ${chatId}\n`;
      sendMessage += `üë§ <b>–ò–º—è:</b> ${data.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
      sendMessage += `üîó <b>–°—Å—ã–ª–∫–∞:</b> ${data.telegramlink || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
      sendMessage += `üì± <b>–¢–µ–ª–µ–≥—Ä–∞–º ID:</b> ${data.telegramid || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
    
      // –†–∞–∑–¥–µ–ª –¥–ª—è VPN
      sendMessage += `üåê <b>VPN IDs:</b>\n`;
    
      if (data.vpnIds.length > 0) {
        for (const vpn of data.vpnIds) {
          sendMessage += `    üîë <b>${vpn.id}:</b> ${vpn.status}\n`;
        }
      } else {
        sendMessage += `    üõë –ù–µ—Ç VPN –∑–∞–ø–∏—Å–µ–π.\n`;
      }
    
      sendMessage += `\n`; // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    }
    
    return sendMessage;
}

