import { createVpnConfig, getUserVpnConfigByID } from "../controllers/vpnConfigController";
import { findOrCreateUser } from "../controllers/userController";
import { getLastTransactionByParameter,updateTransaction } from "../controllers/transactionController";
import { bot } from "../..";
import fs from 'fs/promises'
import path from 'path';
import { ConfigsAPIResponse } from "../../api";

const sendConfigFromBuffer = async(config:ConfigsAPIResponse, chatId:number)=>{
    
    for (const [extension, base64Content] of Object.entries(config.files)) {
        const fileBuffer = Buffer.from(base64Content, 'base64');
        const fileName = `${config.name}.${extension}`;
        const tempFilePath = path.join(__dirname, fileName);
        
        await fs.writeFile(tempFilePath, fileBuffer);
        await bot.sendDocument(chatId, tempFilePath);
        await fs.unlink(tempFilePath);
    }
}

//–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function sendConfigToUserAfterPayment(month:number, chatId:number, userId: number){
    //—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –¥–∞—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    const validUntilDate = new Date();
    validUntilDate.setMonth(validUntilDate.getMonth() + month);
    const createConfigResponse = await createVpnConfig(chatId, validUntilDate.toISOString());

    if (createConfigResponse.success === true){
        await bot.sendMessage(chatId, `üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º!</b> üéâ\n\n` + 
        `–ü–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π üìã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ!`,{parse_mode:"HTML"});
        await sendConfigFromBuffer(createConfigResponse.data.config,chatId);
        
        const transactionId = await getLastTransactionByParameter(chatId,"id");
        updateTransaction(transactionId as string,{state:true, orderValue:createConfigResponse.data.message});
    } else {
        throw new Error(JSON.stringify(createConfigResponse))
    }
}


//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
export async function sendExistConfigToUser(chatId:number, indexConfigToSend:number){
    await findOrCreateUser(chatId);
    const config = await getUserVpnConfigByID(chatId, Number(indexConfigToSend));

    if (config.success === true) {
        //–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É, –ª–∏–±–æ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ —Å—Ä–∞–∑—É
        // const configToSend = indexConfigToSend !== undefined 
        //     ? new Array(allConfigs.data.files[indexConfigToSend])
        //     : allConfigs.data.files

        await sendConfigFromBuffer(config.data.config,chatId);
    } 
    return config.success;
}

