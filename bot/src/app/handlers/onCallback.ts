import TelegramBot from "node-telegram-bot-api";
import { Callback, SubscriptionOption } from "../types";
import { bot, botConfig } from "..";
import { renderSubscriptionsList } from "../renders/subscriptionList";
import { renderSelectedSubscription } from "../renders/selectedSubscription";
import { findOrCreateUser } from "./controllers/userController";
import { getLastTransaction } from "./controllers/transactionController";
import { sendPaymentInvoice } from "./payments/common/sendInvoiceToUser";
import { sendConfigToUserAfterPayment, sendExistConfigToUser } from "./common/vpnConfigSender";
import Cryptomus from "./payments/cryptoPayment/cryptomus";
import logger from "../logs/logger";
import { API } from "../api";
import { resendMediaToUsers } from "./common/resendMediaToUsers";
import { handleNavMyConfigsMsg } from "./onMessageHandler";
import { getVpnConfigs } from "./controllers/vpnConfigController";

export async function handleOnCallback(callbackQuery: TelegramBot.CallbackQuery) {
	try{
		const data = callbackQuery.data;
		const message = callbackQuery.message;

		if (data && message && callbackQuery.from && message.from?.id) {
			const chatId = message.chat.id;
			const messageId = message.message_id;
			const userId = message.from.id;

			//–µ—Å–ª–∏ –≤—ã–∑–æ–≤ –∫–æ–ª–±–µ–∫–∞ –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
			if (data === `${Callback.SUBSCRIPTION_LIST}`) {
				bot.answerCallbackQuery(callbackQuery.id, { // —ç—Ç–∞ —Ö—É–π–Ω—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª, —á—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
					show_alert: false,
				});

				bot.editMessageText("üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", {
					chat_id: chatId,
					message_id: messageId,
					reply_markup: renderSubscriptionsList(),
				});
			}

			//–µ—Å–ª–∏ –∫–æ–ª–ª–±–µ–∫ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
			if (data.includes(`${Callback.SUBSCRIPTION_SELECTED}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});

				const [_callback, value] = data.split("/") as [
					string,
					SubscriptionOption
				];

				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});

				bot.editMessageText(
					`–í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${value} –º–µ—Å—è—Ü(–µ–≤). –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –æ–ø–ª–∞—Ç—ã`,
					{
						chat_id: chatId,
						message_id: messageId,
						reply_markup: renderSelectedSubscription(value),
					}
				);
			}

			//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É
			if (data.includes(`${Callback.PAYMENT}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});
				await findOrCreateUser(chatId);

				const [_callback, subScriptionValue,paymentMethodName] = data.split("/") as [
					string,
					SubscriptionOption,
					string
				];

				const paymentMethod = botConfig.payment.find(pm => pm.name === paymentMethodName);
				paymentMethod 
					? sendPaymentInvoice(chatId,subScriptionValue,paymentMethod)
					: bot.sendMessage(chatId, `–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`);

				logger.logInfo("invoice sended",chatId,["INVOICE_SUCCESS"]);
			}

			//–ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
			if (data.includes(`${Callback.GET_PAYMENT_STATUS}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});
				await findOrCreateUser(chatId);

				const transaction = await getLastTransaction(chatId);
				if (transaction){
					const { id: transactionId, type: transactionType, orderValue: transactionValue } = transaction;
					let transactionStatus = transaction.state;

					//–µ—Å–ª–∏ –∫—Ä–∏–ø—Ç–∞, —Ç–æ —É–∑–Ω–∞–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
					if (transactionType === "crypto"){
						const paymentData = botConfig.payment.find(payment=>payment.type === "crypto")
						if (paymentData?.token){
							const cryptomus = new Cryptomus(paymentData?.token);
							transactionStatus = await cryptomus.checkPayment(chatId);
						}
					}

					//–µ—Å–ª–∏ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
					if (transactionStatus && transactionValue){
						const monthFromTransaction = JSON.parse(transactionValue).month;
						const configExist = await getVpnConfigs(chatId);

						//–µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—Å—Ç—å/–æ–ø–ª–∞—Ç–∞ –µ—Å—Ç—å, –Ω–æ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
						if (configExist.success === false){
							const month = Number(monthFromTransaction);
							await sendConfigToUserAfterPayment(month,chatId,userId);
							logger.logInfo("config created",chatId,["SEND_CONFIG_FROM_STATUS_SUCCESS"]);
						}

						if (configExist.success === true){
							const messageToUser = `‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b> <i>#${transactionId}</i> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:`;
							bot.sendMessage(chatId,messageToUser,{ parse_mode: 'HTML' });
							await handleNavMyConfigsMsg(message);
							logger.logInfo("config already exist",chatId,["GET_CONFIG_FROM_STATUS_SUCCESS"]);
						}
					}
					else {
						const messageToUser = `‚è≥ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b> <i>#${transactionId}</i> –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º!`;
						bot.sendMessage(chatId,messageToUser,{ parse_mode: 'HTML' });
						logger.logInfo("transaction not completed",chatId,["GET_CONFIG_FROM_STATUS_UNDEFINED"]);
					}
				} 
				else {
					bot.sendMessage(chatId, "–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –æ–ø–ª–∞—Ç—É")
				}
			}

			//–∫–æ–ª–±–µ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
			if (data.includes(`${Callback.GET_CONFIG}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});
				sendExistConfigToUser(chatId, Number(data.split('/')[1].split('-')[1]));
				logger.logInfo("get config by button success",chatId,["GET_CONFIG_MENU_SUCCESS"]);
			}

			//–∫–æ–ª–±–µ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			if (data.includes(`${Callback.GET_CLIENTLIST}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});

				const userList = await API.getConfigsList();
				if (userList.success === true){
					let sendMessage = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n";
					for (const user of userList.data.clients){
						sendMessage+=`<i>- ${user.clientName}: ${user.valid ? "–î–µ–π—Å—Ç–≤—É—é—â–∏–π" : "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π"}</i>\n`;
					}
					bot.sendMessage(chatId,sendMessage,{parse_mode:'HTML'});
				}
			}

			//–∫–æ–ª–±–µ–∫ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
			if (data.includes(`${Callback.CREATE_NEWSLETTER}`)) {
				bot.answerCallbackQuery(callbackQuery.id, {
					show_alert: false,
				});
				const configsList = await API.getConfigsList();

			
				if (configsList.success === true) {
					const userList = Array.from(new Set(
						configsList.data.clients
							.map(client => client.clientName.split('-')[0]) // –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –ø–æ—Å–ª–µ "-"
					));
					await resendMediaToUsers(chatId,userList);
				}
			}			
		}
	}
	catch(error){
		logger.logError(error,callbackQuery?.message?.chat,[`${callbackQuery.data}`,"CALLBACK_ERROR"]);
	}
}
