volumes:
    ikev2-vpn-data:

services:
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
        environment:
        - discovery.type=single-node
        - ES_JAVA_OPTS=-Xms512m -Xmx512m
        ports:
        - "9200:9200"

    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.3
        ports:
        - "5601:5601"
        environment:
        - ELASTICSEARCH_HOSTS=http://elastic:changeme@elasticsearch:9200

        depends_on:
        - elasticsearch

    logstash:
        image: docker.elastic.co/logstash/logstash:7.17.3
        ports:
        - "5044:5044"
        environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
        volumes:
        - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        depends_on:
        - elasticsearch
    bot:
        container_name: bot
        build:
            context: ./bot
            dockerfile: Dockerfile
        ports:
            - "3000:3000"
            - "9229:9229"
        environment:
            NODE_ENV: development
        command: >
            sh -c "
            cd /var/app/ &&
            npm install -g bunyan knex &&
            npm install bunyan bunyan-logstash-tcp &&
            npm install &&
            npx knex migrate:latest &&
            npx knex seed:run &&
            npm run watch | bunyan"
        volumes:
            - ./bot:/var/app/:rw
            - /var/app/node_modules
        depends_on:
            postgres:
                condition: service_healthy

    postgres:
        container_name: postgres
        environment:
            POSTGRES_PASSWORD: "${PG_PASSWD:-db_pass}"
            POSTGRES_USER: "${PG_USER:-db_user}"
            POSTGRES_DB: "${PG_DATABASE:-db_common}"
        image: mdillon/postgis:11
        healthcheck:
            test: "psql -c 'SELECT 1' db_common db_user"
            interval: 5s
            timeout: 10s
            retries: 3
        ports:
            - "5434:5432"

    vpn:
        container_name: vpn
        image: hwdsl2/ipsec-vpn-server
        restart: always
        env_file:
            - ./vpn/vpn.env
        ports:
            - "500:500/udp"
            - "4500:4500/udp"
        privileged: true
        hostname: ipsec-vpn-server
        volumes:
            - ikev2-vpn-data:/etc/ipsec.d
            - /lib/modules:/lib/modules:ro

    api:
        container_name: api_server
        build:
            context: ./api
            dockerfile: Dockerfile
        ports:
            - "9001:9001"
            - "9230:9230"
        environment:
            NODE_ENV: development
        command: >
            sh -c "
            cd /var/app/ &&
            npm install -g bunyan knex &&
            npm install winston &&
            npm install &&
            npx knex migrate:latest &&
            npx knex seed:run &&
            npm run watch | bunyan"
        volumes:
            - ikev2-vpn-data:/etc/ipsec.d
            - ./api:/var/app/:rw
            - /var/app/node_modules
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            api_postgres:
                condition: service_healthy
    
    api_postgres:
        container_name: api_postgres
        environment:
            POSTGRES_PASSWORD: "${PG_PASSWD:-db_pass}"
            POSTGRES_USER: "${PG_USER:-db_user}"
            POSTGRES_DB: "${PG_DATABASE:-db_api}"
        image: mdillon/postgis:11
        healthcheck:
            test: "psql -c 'SELECT 1' db_api db_user"
            interval: 5s
            timeout: 10s
            retries: 3
        ports:
            - "5435:5432"